{"version":3,"sources":["CardComponent.js","CardContainer.js","NavBar.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","species","films","_this2","fetch","props","then","resp","json","setState","name","filmsArray","map","film","push","concat","episode_id","title","console","log","react_default","a","createElement","className","i","key","Component","CardContainer","_ref","cardList","data","user","src_CardComponent","url","navLiStyles","listStyleType","NavBar","style","Header","App","response","people","results","src_NavBar","src_Header","length","src_CardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae2335bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\n\nclass CardComponent extends Component {\n  constructor() {\n    super()\n    this.state = {\n      species: ['Fetching species...'],\n      films: ['Loading films...']\n    }\n  }\n\n  componentDidMount() {\n    fetch(this.props.species[0])\n      .then(resp => resp.json())\n      .then(json => this.setState({species: json.name}))\n\n    let filmsArray = [];\n    this.props.films.map(film => {\n      return (\n        fetch(film)\n        .then(resp => resp.json())\n        .then(json => filmsArray.push(`Episode ${json.episode_id}: ${json.title}`))\n        // .then(resp => filmsArray.push(resp.title))\n      );\n    })\n    this.setState({films:filmsArray})\n    console.log('array', filmsArray);\n    console.log('state', this.state.films);\n\n  }\n\n\n\n\n  render() {\n    const { name } = this.props;\n\n    return (\n      <div className='Card'>\n        <h3>{ name }</h3>\n        {/* <h4 style={{fontStyle: 'italic'}}>The species.name value should be shown below... not the url</h4> */}\n        <h4>{ this.state.species }</h4>\n        <div>Featured in:\n          {/* <p style={{fontStyle: 'italic'}}>(movie titles should be show in the list below, not the urls...)</p> */}\n            <ul>\n              { this.state.films.map((film, i) => (\n                <li key={i}>\n                  { film }\n                </li>\n              ))}\n            </ul>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default CardComponent;\n","import React from 'react';\nimport CardComponent from './CardComponent';\nimport './App.css';\n\nconst CardContainer = ({ data }) => {\n  const cardList = data.map((user, i) => {\n    return (\n      <CardComponent\n        key={user.url}\n        name={user.name}\n        species={user.species}\n        films={user.films}\n      />\n    )}\n  )\n  return (\n    <section className='CardContainer'>\n      {cardList}\n    </section>\n    \n  );\n}\n\nexport default CardContainer;\n","import React from 'react';\nimport './App.css';\n\nconst navLiStyles = {\n  listStyleType: 'none'\n}\n\n\n\nconst NavBar = () => {\n  return (\n    <nav className='Nav'>\n      <ul style={navLiStyles}>\n        <li>Home</li>\n        <li>Search</li>\n        <li>About</li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './App.css';\n\nconst Header = () => {\n  return (\n\n      <h1 className='Header'>Star Wars</h1>\n\n  )\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport CardContainer from './CardContainer';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      films: [],\n      species: '',\n    }\n\n  }\n\n  componentDidMount() {\n    const url = 'https://swapi.co/api/people/';\n\n    fetch(url)\n      .then(response => response.json())\n      .then(people => this.setState({ data: people.results }));\n\n    }\n\n\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className='App'>\n          <NavBar />\n          <Header />\n          {\n            data.length === 0\n            ? <h3>Loading Cards...</h3>\n            : <h3>Cards Count: {data.length}</h3>\n          }\n          <CardContainer data={data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}